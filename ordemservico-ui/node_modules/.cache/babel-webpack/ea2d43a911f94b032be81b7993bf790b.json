{"ast":null,"code":"import _classCallCheck from \"C:/Users/Felip/Documents/Angular/ordemservico-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Felip/Documents/Angular/ordemservico-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { InjectionToken, forwardRef, Optional, Inject, ElementRef, KeyValueDiffers, Input, HostListener, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as Éµngcc0 from '@angular/core';\n\nvar CurrencyMaskInputMode = /*@__PURE__*/function (CurrencyMaskInputMode) {\n  CurrencyMaskInputMode[CurrencyMaskInputMode[\"FINANCIAL\"] = 0] = \"FINANCIAL\";\n  CurrencyMaskInputMode[CurrencyMaskInputMode[\"NATURAL\"] = 1] = \"NATURAL\";\n  return CurrencyMaskInputMode;\n}({});\n\nvar CURRENCY_MASK_CONFIG = /*@__PURE__*/new InjectionToken(\"currency.mask.config\");\n\nvar InputManager = /*#__PURE__*/function () {\n  function InputManager(htmlInputElement) {\n    _classCallCheck(this, InputManager);\n\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  _createClass(InputManager, [{\n    key: \"setCursorAt\",\n    value: function setCursorAt(position) {\n      if (this.htmlInputElement.setSelectionRange) {\n        this.htmlInputElement.focus();\n        this.htmlInputElement.setSelectionRange(position, position);\n      } else if (this.htmlInputElement.createTextRange) {\n        var textRange = this.htmlInputElement.createTextRange();\n        textRange.collapse(true);\n        textRange.moveEnd(\"character\", position);\n        textRange.moveStart(\"character\", position);\n        textRange.select();\n      }\n    }\n  }, {\n    key: \"updateValueAndCursor\",\n    value: function updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n      this.rawValue = newRawValue;\n      var newLength = newRawValue.length;\n      selectionStart = selectionStart - (oldLength - newLength);\n      this.setCursorAt(selectionStart);\n    }\n  }, {\n    key: \"canInputMoreNumbers\",\n    get: function get() {\n      var onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n      var haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n      var selectionStart = this.inputSelection.selectionStart;\n      var selectionEnd = this.inputSelection.selectionEnd;\n      var haveNumberSelected = !!(selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n      var startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n      return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n  }, {\n    key: \"inputSelection\",\n    get: function get() {\n      var selectionStart = 0;\n      var selectionEnd = 0;\n\n      if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n        selectionStart = this.htmlInputElement.selectionStart;\n        selectionEnd = this.htmlInputElement.selectionEnd;\n      } else {\n        var range = document.selection.createRange();\n\n        if (range && range.parentElement() == this.htmlInputElement) {\n          var lenght = this.htmlInputElement.value.length;\n          var normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n          var startRange = this.htmlInputElement.createTextRange();\n          startRange.moveToBookmark(range.getBookmark());\n          var endRange = this.htmlInputElement.createTextRange();\n          endRange.collapse(false);\n\n          if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n            selectionStart = selectionEnd = lenght;\n          } else {\n            selectionStart = -startRange.moveStart(\"character\", -lenght);\n            selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n            if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n              selectionEnd = lenght;\n            } else {\n              selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n              selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n            }\n          }\n        }\n      }\n\n      return {\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n      };\n    }\n  }, {\n    key: \"rawValue\",\n    get: function get() {\n      return this.htmlInputElement && this.htmlInputElement.value;\n    },\n    set: function set(value) {\n      this._storedRawValue = value;\n\n      if (this.htmlInputElement) {\n        this.htmlInputElement.value = value;\n      }\n    }\n  }, {\n    key: \"storedRawValue\",\n    get: function get() {\n      return this._storedRawValue;\n    }\n  }]);\n\n  return InputManager;\n}();\n\nvar InputService = /*#__PURE__*/function () {\n  function InputService(htmlInputElement, options) {\n    _classCallCheck(this, InputService);\n\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n    this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n    this.PER_AR_NUMBER = new Map();\n    this.inputManager = new InputManager(htmlInputElement);\n    this.initialize();\n  }\n\n  _createClass(InputService, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n      this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n      this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n      this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n      this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n      this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n      this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n      this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n      this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n      this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n      this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n      this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n      this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n      this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n      this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n      this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n      this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n      this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n      this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n      this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n    }\n  }, {\n    key: \"addNumber\",\n    value: function addNumber(keyCode) {\n      var _this$options = this.options,\n          decimal = _this$options.decimal,\n          precision = _this$options.precision,\n          inputMode = _this$options.inputMode;\n      var keyChar = String.fromCharCode(keyCode);\n      var isDecimalChar = keyChar === this.options.decimal;\n\n      if (!this.rawValue) {\n        this.rawValue = this.applyMask(false, keyChar);\n        var selectionStart = undefined;\n\n        if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n          selectionStart = this.rawValue.indexOf(decimal);\n\n          if (isDecimalChar) {\n            selectionStart++;\n          }\n        }\n\n        this.updateFieldValue(selectionStart);\n      } else {\n        var _selectionStart = this.inputSelection.selectionStart;\n        var selectionEnd = this.inputSelection.selectionEnd;\n        var rawValueStart = this.rawValue.substring(0, _selectionStart);\n        var rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length); // In natural mode, replace decimals instead of shifting them.\n\n        var inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n\n        if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && _selectionStart === selectionEnd) {\n          rawValueEnd = rawValueEnd.substring(1);\n        }\n\n        var newValue = rawValueStart + keyChar + rawValueEnd;\n        var nextSelectionStart = _selectionStart + 1;\n        var isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n\n        if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n          // If the cursor is just before the decimal or thousands separator and the user types the\n          // decimal or thousands separator, move the cursor past it.\n          nextSelectionStart++;\n        } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n          // Ignore other non-numbers.\n          return;\n        }\n\n        this.rawValue = newValue;\n        this.updateFieldValue(nextSelectionStart);\n      }\n    }\n  }, {\n    key: \"applyMask\",\n    value: function applyMask(isNumber, rawValue) {\n      var disablePadAndTrim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var _this$options2 = this.options,\n          allowNegative = _this$options2.allowNegative,\n          decimal = _this$options2.decimal,\n          precision = _this$options2.precision,\n          prefix = _this$options2.prefix,\n          suffix = _this$options2.suffix,\n          thousands = _this$options2.thousands,\n          min = _this$options2.min,\n          max = _this$options2.max,\n          inputMode = _this$options2.inputMode;\n      rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n      var onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n\n      if (!onlyNumbers && rawValue !== decimal) {\n        return \"\";\n      }\n\n      if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n        rawValue = this.padOrTrimPrecision(rawValue);\n        onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n      }\n\n      var integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^\\u0660*/g, \"\").replace(/^\\u06F0*/g, \"\").replace(/^0*/g, \"\");\n\n      if (integerPart == \"\") {\n        integerPart = \"0\";\n      }\n\n      var integerValue = parseInt(integerPart);\n      integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n\n      if (thousands && integerPart.startsWith(thousands)) {\n        integerPart = integerPart.substring(1);\n      }\n\n      var newRawValue = integerPart;\n      var decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n      var decimalValue = parseInt(decimalPart) || 0;\n      var isNegative = rawValue.indexOf(\"-\") > -1; // Ensure max is at least as large as min.\n\n      max = this.isNullOrUndefined(max) || this.isNullOrUndefined(min) ? max : Math.max(max, min); // Restrict to the min and max values.\n\n      var newValue = integerValue + decimalValue / 100;\n      newValue = isNegative ? -newValue : newValue;\n\n      if (!this.isNullOrUndefined(max) && newValue > max) {\n        return this.applyMask(true, max + '');\n      } else if (!this.isNullOrUndefined(min) && newValue < min) {\n        return this.applyMask(true, min + '');\n      }\n\n      if (precision > 0) {\n        if (newRawValue == \"0\" && decimalPart.length < precision) {\n          newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n        } else {\n          newRawValue += decimal + decimalPart;\n        }\n      }\n\n      var isZero = newValue == 0;\n      var operator = isNegative && allowNegative && !isZero ? \"-\" : \"\";\n      return operator + prefix + newRawValue + suffix;\n    }\n  }, {\n    key: \"padOrTrimPrecision\",\n    value: function padOrTrimPrecision(rawValue) {\n      var _this$options3 = this.options,\n          decimal = _this$options3.decimal,\n          precision = _this$options3.precision;\n      var decimalIndex = rawValue.lastIndexOf(decimal);\n\n      if (decimalIndex === -1) {\n        decimalIndex = rawValue.length;\n        rawValue += decimal;\n      }\n\n      var decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n      var actualPrecision = decimalPortion.length;\n\n      if (actualPrecision < precision) {\n        for (var i = actualPrecision; i < precision; i++) {\n          decimalPortion += '0';\n        }\n      } else if (actualPrecision > precision) {\n        decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n      }\n\n      return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n    }\n  }, {\n    key: \"clearMask\",\n    value: function clearMask(rawValue) {\n      if (this.isNullable() && rawValue === \"\") return null;\n      var value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n      if (this.options.thousands) {\n        value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n      }\n\n      if (this.options.decimal) {\n        value = value.replace(this.options.decimal, \".\");\n      }\n\n      this.PER_AR_NUMBER.forEach(function (val, key) {\n        var re = new RegExp(key, \"g\");\n        value = value.replace(re, val);\n      });\n      return parseFloat(value);\n    }\n  }, {\n    key: \"changeToNegative\",\n    value: function changeToNegative() {\n      if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n        // Apply the mask to ensure the min and max values are enforced.\n        this.rawValue = this.applyMask(false, \"-\" + this.rawValue);\n      }\n    }\n  }, {\n    key: \"changeToPositive\",\n    value: function changeToPositive() {\n      // Apply the mask to ensure the min and max values are enforced.\n      this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n    }\n  }, {\n    key: \"removeNumber\",\n    value: function removeNumber(keyCode) {\n      var _this$options4 = this.options,\n          decimal = _this$options4.decimal,\n          thousands = _this$options4.thousands,\n          prefix = _this$options4.prefix,\n          suffix = _this$options4.suffix,\n          inputMode = _this$options4.inputMode;\n\n      if (this.isNullable() && this.value == 0) {\n        this.rawValue = null;\n        return;\n      }\n\n      var selectionEnd = this.inputSelection.selectionEnd;\n      var selectionStart = this.inputSelection.selectionStart;\n      var suffixStart = this.rawValue.length - suffix.length;\n      selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n      selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length)); // Check if selection was entirely in the prefix or suffix. \n\n      if (selectionStart === selectionEnd && this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n        this.updateFieldValue(selectionStart);\n        return;\n      }\n\n      var decimalIndex = this.rawValue.indexOf(decimal);\n\n      if (decimalIndex === -1) {\n        decimalIndex = this.rawValue.length;\n      }\n\n      var shiftSelection = 0;\n      var insertChars = '';\n\n      if (selectionEnd === selectionStart) {\n        if (keyCode == 8) {\n          if (selectionStart <= prefix.length) {\n            return;\n          }\n\n          selectionStart--; // If previous char isn't a number, go back one more.\n\n          if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n            selectionStart--;\n          } // In natural mode, jump backwards when in decimal portion of number.\n\n\n          if (inputMode === CurrencyMaskInputMode.NATURAL && decimalIndex < selectionEnd) {\n            shiftSelection = -1;\n          }\n        } else if (keyCode == 46 || keyCode == 63272) {\n          if (selectionStart === suffixStart) {\n            return;\n          }\n\n          selectionEnd++; // If next char isn't a number, go one more.\n\n          if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n            selectionStart++;\n            selectionEnd++;\n          }\n        }\n      } // In natural mode, replace decimals with 0s.\n\n\n      if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n        var replacedDecimalCount = selectionEnd - selectionStart;\n\n        for (var i = 0; i < replacedDecimalCount; i++) {\n          insertChars += '0';\n        }\n      }\n\n      var selectionFromEnd = this.rawValue.length - selectionEnd;\n      this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd); // Remove leading thousand separator from raw value.\n\n      var startChar = this.rawValue.substr(prefix.length, 1);\n\n      if (startChar === thousands) {\n        this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n        selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n      }\n\n      this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n    }\n  }, {\n    key: \"updateFieldValue\",\n    value: function updateFieldValue(selectionStart) {\n      var disablePadAndTrim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n      selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n      selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n      this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(options) {\n      var value = this.value;\n      this.options = options;\n      this.value = value;\n    }\n  }, {\n    key: \"prefixLength\",\n    value: function prefixLength() {\n      return this.options.prefix.length;\n    }\n  }, {\n    key: \"suffixLength\",\n    value: function suffixLength() {\n      return this.options.suffix.length;\n    }\n  }, {\n    key: \"isNullable\",\n    value: function isNullable() {\n      return this.options.nullable;\n    }\n  }, {\n    key: \"isNullOrUndefined\",\n    value: function isNullOrUndefined(value) {\n      return value === null || value === undefined;\n    }\n  }, {\n    key: \"canInputMoreNumbers\",\n    get: function get() {\n      return this.inputManager.canInputMoreNumbers;\n    }\n  }, {\n    key: \"inputSelection\",\n    get: function get() {\n      return this.inputManager.inputSelection;\n    }\n  }, {\n    key: \"rawValue\",\n    get: function get() {\n      return this.inputManager.rawValue;\n    },\n    set: function set(value) {\n      this.inputManager.rawValue = value;\n    }\n  }, {\n    key: \"storedRawValue\",\n    get: function get() {\n      return this.inputManager.storedRawValue;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.clearMask(this.rawValue);\n    },\n    set: function set(value) {\n      this.rawValue = this.applyMask(true, \"\" + value);\n    }\n  }]);\n\n  return InputService;\n}();\n\nvar InputHandler = /*#__PURE__*/function () {\n  function InputHandler(htmlInputElement, options) {\n    _classCallCheck(this, InputHandler);\n\n    this.inputService = new InputService(htmlInputElement, options);\n  }\n\n  _createClass(InputHandler, [{\n    key: \"handleCut\",\n    value: function handleCut(event) {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.inputService.updateFieldValue();\n\n        _this.setValue(_this.inputService.value);\n\n        _this.onModelChange(_this.inputService.value);\n      }, 0);\n    }\n  }, {\n    key: \"handleInput\",\n    value: function handleInput(event) {\n      var keyCode = this.inputService.rawValue.charCodeAt(this.inputService.rawValue.length - 1);\n      var rawValueLength = this.inputService.rawValue.length;\n      var rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n      var storedRawValueLength = this.inputService.storedRawValue.length;\n      this.inputService.rawValue = this.inputService.storedRawValue;\n\n      if (rawValueLength != rawValueSelectionEnd || Math.abs(rawValueLength - storedRawValueLength) != 1) {\n        this.setCursorPosition(event);\n        return;\n      }\n\n      if (rawValueLength < storedRawValueLength) {\n        this.inputService.removeNumber(8);\n      }\n\n      if (rawValueLength > storedRawValueLength) {\n        switch (keyCode) {\n          case 43:\n            this.inputService.changeToPositive();\n            break;\n\n          case 45:\n            this.inputService.changeToNegative();\n            break;\n\n          default:\n            if (!this.inputService.canInputMoreNumbers) {\n              return;\n            }\n\n            this.inputService.addNumber(keyCode);\n            break;\n        }\n      }\n\n      this.setCursorPosition(event);\n      this.onModelChange(this.inputService.value);\n    }\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      var keyCode = event.which || event.charCode || event.keyCode;\n\n      if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n        event.preventDefault();\n\n        if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() && this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n          this.clearValue();\n        } else {\n          this.inputService.removeNumber(keyCode);\n          this.onModelChange(this.inputService.value);\n        }\n      }\n    }\n  }, {\n    key: \"clearValue\",\n    value: function clearValue() {\n      this.setValue(this.inputService.isNullable() ? null : 0);\n      this.onModelChange(this.inputService.value);\n    }\n  }, {\n    key: \"handleKeypress\",\n    value: function handleKeypress(event) {\n      var keyCode = event.which || event.charCode || event.keyCode;\n      event.preventDefault();\n\n      if (keyCode === 97 && event.ctrlKey) {\n        return;\n      }\n\n      switch (keyCode) {\n        case undefined:\n        case 9:\n        case 13:\n          return;\n\n        case 43:\n          this.inputService.changeToPositive();\n          break;\n\n        case 45:\n          this.inputService.changeToNegative();\n          break;\n\n        default:\n          if (this.inputService.canInputMoreNumbers) {\n            var selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n            if (selectionRangeLength == this.inputService.rawValue.length) {\n              this.setValue(null);\n            }\n\n            this.inputService.addNumber(keyCode);\n          }\n\n          break;\n      }\n\n      this.onModelChange(this.inputService.value);\n    }\n  }, {\n    key: \"handlePaste\",\n    value: function handlePaste(event) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.inputService.updateFieldValue();\n\n        _this2.setValue(_this2.inputService.value);\n\n        _this2.onModelChange(_this2.inputService.value);\n      }, 1);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(options) {\n      this.inputService.updateOptions(options);\n    }\n  }, {\n    key: \"getOnModelChange\",\n    value: function getOnModelChange() {\n      return this.onModelChange;\n    }\n  }, {\n    key: \"setOnModelChange\",\n    value: function setOnModelChange(callbackFunction) {\n      this.onModelChange = callbackFunction;\n    }\n  }, {\n    key: \"getOnModelTouched\",\n    value: function getOnModelTouched() {\n      return this.onModelTouched;\n    }\n  }, {\n    key: \"setOnModelTouched\",\n    value: function setOnModelTouched(callbackFunction) {\n      this.onModelTouched = callbackFunction;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.inputService.value = value;\n    }\n  }, {\n    key: \"setCursorPosition\",\n    value: function setCursorPosition(event) {\n      setTimeout(function () {\n        event.target.setSelectionRange(event.target.value.length, event.target.value.length);\n      }, 0);\n    }\n  }]);\n\n  return InputHandler;\n}();\n\nvar CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*@__PURE__*/forwardRef(function () {\n    return CurrencyMaskDirective;\n  }),\n  multi: true\n};\n\nvar CurrencyMaskDirective = /*@__PURE__*/function () {\n  var CurrencyMaskDirective = /*#__PURE__*/function () {\n    function CurrencyMaskDirective(currencyMaskConfig, elementRef, keyValueDiffers) {\n      _classCallCheck(this, CurrencyMaskDirective);\n\n      this.currencyMaskConfig = currencyMaskConfig;\n      this.elementRef = elementRef;\n      this.keyValueDiffers = keyValueDiffers;\n      this.options = {};\n      this.optionsTemplate = {\n        align: \"right\",\n        allowNegative: true,\n        allowZero: true,\n        decimal: \".\",\n        precision: 2,\n        prefix: \"$ \",\n        suffix: \"\",\n        thousands: \",\",\n        nullable: false,\n        inputMode: CurrencyMaskInputMode.FINANCIAL\n      };\n\n      if (currencyMaskConfig) {\n        this.optionsTemplate = currencyMaskConfig;\n      }\n\n      this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n\n    _createClass(CurrencyMaskDirective, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n          this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n          this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n      }\n    }, {\n      key: \"handleBlur\",\n      value: function handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n      }\n    }, {\n      key: \"handleCut\",\n      value: function handleCut(event) {\n        if (!this.isChromeAndroid()) {\n          !this.isReadOnly() && this.inputHandler.handleCut(event);\n        }\n      }\n    }, {\n      key: \"handleInput\",\n      value: function handleInput(event) {\n        if (this.isChromeAndroid()) {\n          !this.isReadOnly() && this.inputHandler.handleInput(event);\n        }\n      }\n    }, {\n      key: \"handleKeydown\",\n      value: function handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n          !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n        }\n      }\n    }, {\n      key: \"handleKeypress\",\n      value: function handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n          !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n        }\n      }\n    }, {\n      key: \"handlePaste\",\n      value: function handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n          !this.isReadOnly() && this.inputHandler.handlePaste(event);\n        }\n      }\n    }, {\n      key: \"handleDrop\",\n      value: function handleDrop(event) {\n        if (!this.isChromeAndroid()) {\n          event.preventDefault();\n        }\n      }\n    }, {\n      key: \"isChromeAndroid\",\n      value: function isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n      }\n    }, {\n      key: \"isReadOnly\",\n      value: function isReadOnly() {\n        return this.elementRef.nativeElement.hasAttribute('readonly');\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.inputHandler.setValue(value);\n      }\n    }]);\n\n    return CurrencyMaskDirective;\n  }();\n\n  CurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) {\n    return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers));\n  };\n\n  CurrencyMaskDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: CurrencyMaskDirective,\n    selectors: [[\"\", \"currencyMask\", \"\"]],\n    hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n          return ctx.handleBlur($event);\n        })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n          return ctx.handleCut($event);\n        })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n          return ctx.handleInput($event);\n        })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n          return ctx.handleKeydown($event);\n        })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n          return ctx.handleKeypress($event);\n        })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n          return ctx.handlePaste($event);\n        })(\"drop\", function CurrencyMaskDirective_drop_HostBindingHandler($event) {\n          return ctx.handleDrop($event);\n        });\n      }\n    },\n    inputs: {\n      options: \"options\"\n    },\n    features: [/*@__PURE__*/Éµngcc0.ÉµÉµProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])]\n  });\n  return CurrencyMaskDirective;\n}();\n\nvar NgxCurrencyModule_1;\n\nvar NgxCurrencyModule = /*@__PURE__*/function () {\n  var NgxCurrencyModule = NgxCurrencyModule_1 = /*#__PURE__*/function () {\n    function NgxCurrencyModule() {\n      _classCallCheck(this, NgxCurrencyModule);\n    }\n\n    _createClass(NgxCurrencyModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot(config) {\n        return {\n          ngModule: NgxCurrencyModule_1,\n          providers: [{\n            provide: CURRENCY_MASK_CONFIG,\n            useValue: config\n          }]\n        };\n      }\n    }]);\n\n    return NgxCurrencyModule;\n  }();\n\n  NgxCurrencyModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: NgxCurrencyModule\n  });\n  NgxCurrencyModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    factory: function NgxCurrencyModule_Factory(t) {\n      return new (t || NgxCurrencyModule)();\n    },\n    imports: [[CommonModule, FormsModule]]\n  });\n  return NgxCurrencyModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCurrencyModule, {\n    declarations: function declarations() {\n      return [CurrencyMaskDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, FormsModule];\n    },\n    exports: function exports() {\n      return [CurrencyMaskDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CurrencyMaskDirective, CurrencyMaskInputMode, NgxCurrencyModule, CURRENCY_MASK_CONFIG as Éµa };","map":null,"metadata":{},"sourceType":"module"}